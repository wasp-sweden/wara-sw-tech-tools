#!/usr/bin/env python3

from tep.dashboard import Dashboard
from tep.results import *

import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from dash import html
from dash import dcc
from pathlib import Path

import tep_dashboard as tdc

import json

result_files = [(project, file) for project in get_projects() for file in get_results_files("depclean", project)]

dashboard = Dashboard(title = "DepClean")
dashboard.add(tdc.Widget(
	title="Introduction",
	meta={},
	children=dcc.Markdown("""
## What is DepClean?

DepClean is a tool to automatically remove dependencies that are included in your Java dependency tree but are not
actually used in the project's code. DepClean detects and removes all the unused dependencies declared in the `pom.xml`
file of a project or imported from its parent. For that, it relies on bytecode static analysis and extends
the `maven-dependency-analyze` plugin (more details on
this [plugin](https://maven.apache.org/plugins/maven-dependency-plugin/analyze-mojo.html)). DepClean does not modify the
original source code of the application nor its original `pom.xml`. It can be executed as a Maven goal through the
command line or integrated directly into the Maven build lifecycle.
	""", style={ "padding": "0px 24px" })
))

for (project, file) in result_files:
	with open(file) as results_file:
		results = json.load(results_file)
		dashboard.add(tdc.Widget(
			title=f"Project: {project}",
			meta=results["meta"],
			children=tdc.DepcleanGraph(data=results["results"])
		))

if __name__ == "__main__":
	dashboard.build().serve()
